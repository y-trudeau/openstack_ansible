---

- name: keystone package
  apt: pkg={{ item }} state=installed
  tags: keystone
  with_items:
    - keystone
    - python-keystone

- name: write the keystone config file
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf owner=root group=root mode=0644
  notify:
    - restart keystone

- name: remove old sqlite db file
  file: path=/var/lib/keystone/keystone.db state=absent

- name: create keystone database
  mysql_db: name=keystone state=present

- name: keystone user from 127.0.0.1
  mysql_user: name=keystone password={{ KEYSTONE_DBPASS }} host='127.0.0.1' priv=keystone.*:ALL state=present

- name: keystone user from localhost
  mysql_user: name=keystone password={{ KEYSTONE_DBPASS }} host='localhost' priv=keystone.*:ALL state=present

- name: keystone user from %
  mysql_user: name=keystone password={{ KEYSTONE_DBPASS }} host='%' priv=keystone.*:ALL state=present

- name: keystone db_sync
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone

- name: check if there has been any change to the keystone db
  register: keystone_change
  shell: mysql keystone -BN -e "select count(*) from information_schema.tables where table_schema='keystone' and (now()-create_time)<120 limit 1"
  
- name: restart keystone if any db changes within 2min
  service: name=keystone state=restarted
  when: keystone_change.stdout != "0"
  
- name: cron job to flush the old tokens
  cron: name="keystone_flush" user=keystone state=present minute=1 job="/usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1"

- name: render keystone init template
  template: src=keystone_init.sh.j2 dest=/var/tmp/keystone_init.sh owner=root group=root mode=0755

- name: initialize keystone
  shell: /var/tmp/keystone_init.sh

- file: path=/var/tmp/keystone_init.sh state=absent

- name: get keystone services
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-list
  register: keystone_service_list_result

- name: create keystone keystone service 
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-create --name=keystone --type=identity --description="OpenStack Identity"
  when: keystone_service_list_result.stdout.find('keystone') == -1

- name: get keystone endpoints
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone endpoint-list 
  register: keystone_endpoint_list_result

- name: get keystone keystne service id
  shell:  OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone service-list | awk '/ identity / {print $2}'
  register: keystone_keystone_service_id

- name: create keystone endpoint
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone endpoint-create --service-id={{ keystone_keystone_service_id.stdout }} --publicurl=http://{{ ansible_hostname }}:5000/v2.0 --internalurl=http://{{ ansible_hostname }}:5000/v2.0 --adminurl=http://{{ ansible_hostname }}:35357/v2.0
  when: keystone_endpoint_list_result.stdout.find(keystone_keystone_service_id.stdout) == -1

- name: creates the openstack_admin.rc
  template: src=openstack_admin.rc.j2 dest=/root/.openstack_admin.rc owner=root group=root mode=0600

- name: creates the openstack_demo.rc
  template: src=openstack_demo.rc.j2 dest=/root/.openstack_demo.rc owner=root group=root mode=0600

- name: get keystone tenant list
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone tenant-list
  register: keystone_tenant_list_result

- name: create service tenant
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone tenant-create --name=service --description="Service Tenant"
  when: keystone_tenant_list_result.stdout.find('service') == -1

- name: create demo tenant
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone tenant-create --name=demo --description="demo tenant"
  when: keystone_tenant_list_result.stdout.find('demo') == -1

- name: get keystone user list
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-list 
  register: keystone_user_list_result

- name: create demo user
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-create --name=demo --pass=demo --email demo@localhost
  when: keystone_user_list_result.stdout.find('demo') == -1
  
- name: add role admin to user demo
  shell: OS_SERVICE_TOKEN="{{ KEYSTONE_ADMIN_TOKEN }}" OS_SERVICE_ENDPOINT=http://{{ ansible_hostname }}:35357/v2.0 keystone user-role-add --user demo --tenant demo --role admin
  ignore_errors: True